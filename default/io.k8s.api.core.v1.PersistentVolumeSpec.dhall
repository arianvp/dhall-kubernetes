\(_params : {}) ->
{ accessModes = ([] : Optional (Text))
, awsElasticBlockStore = ([] : Optional (../types/io.k8s.api.core.v1.AWSElasticBlockStoreVolumeSource.dhall))
, azureDisk = ([] : Optional (../types/io.k8s.api.core.v1.AzureDiskVolumeSource.dhall))
, azureFile = ([] : Optional (../types/io.k8s.api.core.v1.AzureFilePersistentVolumeSource.dhall))
, capacity = ([] : Optional ((List {mapKey : Text, mapValue : Text})))
, cephfs = ([] : Optional (../types/io.k8s.api.core.v1.CephFSPersistentVolumeSource.dhall))
, cinder = ([] : Optional (../types/io.k8s.api.core.v1.CinderVolumeSource.dhall))
, claimRef = ([] : Optional (../types/io.k8s.api.core.v1.ObjectReference.dhall))
, csi = ([] : Optional (../types/io.k8s.api.core.v1.CSIPersistentVolumeSource.dhall))
, fc = ([] : Optional (../types/io.k8s.api.core.v1.FCVolumeSource.dhall))
, flexVolume = ([] : Optional (../types/io.k8s.api.core.v1.FlexPersistentVolumeSource.dhall))
, flocker = ([] : Optional (../types/io.k8s.api.core.v1.FlockerVolumeSource.dhall))
, gcePersistentDisk = ([] : Optional (../types/io.k8s.api.core.v1.GCEPersistentDiskVolumeSource.dhall))
, glusterfs = ([] : Optional (../types/io.k8s.api.core.v1.GlusterfsVolumeSource.dhall))
, hostPath = ([] : Optional (../types/io.k8s.api.core.v1.HostPathVolumeSource.dhall))
, iscsi = ([] : Optional (../types/io.k8s.api.core.v1.ISCSIPersistentVolumeSource.dhall))
, local = ([] : Optional (../types/io.k8s.api.core.v1.LocalVolumeSource.dhall))
, mountOptions = ([] : Optional (Text))
, nfs = ([] : Optional (../types/io.k8s.api.core.v1.NFSVolumeSource.dhall))
, nodeAffinity = ([] : Optional (../types/io.k8s.api.core.v1.VolumeNodeAffinity.dhall))
, persistentVolumeReclaimPolicy = ([] : Optional (Text))
, photonPersistentDisk = ([] : Optional (../types/io.k8s.api.core.v1.PhotonPersistentDiskVolumeSource.dhall))
, portworxVolume = ([] : Optional (../types/io.k8s.api.core.v1.PortworxVolumeSource.dhall))
, quobyte = ([] : Optional (../types/io.k8s.api.core.v1.QuobyteVolumeSource.dhall))
, rbd = ([] : Optional (../types/io.k8s.api.core.v1.RBDPersistentVolumeSource.dhall))
, scaleIO = ([] : Optional (../types/io.k8s.api.core.v1.ScaleIOPersistentVolumeSource.dhall))
, storageClassName = ([] : Optional (Text))
, storageos = ([] : Optional (../types/io.k8s.api.core.v1.StorageOSPersistentVolumeSource.dhall))
, volumeMode = ([] : Optional (Text))
, vsphereVolume = ([] : Optional (../types/io.k8s.api.core.v1.VsphereVirtualDiskVolumeSource.dhall))
}
