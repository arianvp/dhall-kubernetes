\(name : (Text)) -> 
{ awsElasticBlockStore = ([] : Optional (../types/io.k8s.api.core.v1.AWSElasticBlockStoreVolumeSource.dhall))
, azureDisk = ([] : Optional (../types/io.k8s.api.core.v1.AzureDiskVolumeSource.dhall))
, azureFile = ([] : Optional (../types/io.k8s.api.core.v1.AzureFileVolumeSource.dhall))
, cephfs = ([] : Optional (../types/io.k8s.api.core.v1.CephFSVolumeSource.dhall))
, cinder = ([] : Optional (../types/io.k8s.api.core.v1.CinderVolumeSource.dhall))
, configMap = ([] : Optional (../types/io.k8s.api.core.v1.ConfigMapVolumeSource.dhall))
, downwardAPI = ([] : Optional (../types/io.k8s.api.core.v1.DownwardAPIVolumeSource.dhall))
, emptyDir = ([] : Optional (../types/io.k8s.api.core.v1.EmptyDirVolumeSource.dhall))
, fc = ([] : Optional (../types/io.k8s.api.core.v1.FCVolumeSource.dhall))
, flexVolume = ([] : Optional (../types/io.k8s.api.core.v1.FlexVolumeSource.dhall))
, flocker = ([] : Optional (../types/io.k8s.api.core.v1.FlockerVolumeSource.dhall))
, gcePersistentDisk = ([] : Optional (../types/io.k8s.api.core.v1.GCEPersistentDiskVolumeSource.dhall))
, gitRepo = ([] : Optional (../types/io.k8s.api.core.v1.GitRepoVolumeSource.dhall))
, glusterfs = ([] : Optional (../types/io.k8s.api.core.v1.GlusterfsVolumeSource.dhall))
, hostPath = ([] : Optional (../types/io.k8s.api.core.v1.HostPathVolumeSource.dhall))
, iscsi = ([] : Optional (../types/io.k8s.api.core.v1.ISCSIVolumeSource.dhall))
, name = name
, nfs = ([] : Optional (../types/io.k8s.api.core.v1.NFSVolumeSource.dhall))
, persistentVolumeClaim = ([] : Optional (../types/io.k8s.api.core.v1.PersistentVolumeClaimVolumeSource.dhall))
, photonPersistentDisk = ([] : Optional (../types/io.k8s.api.core.v1.PhotonPersistentDiskVolumeSource.dhall))
, portworxVolume = ([] : Optional (../types/io.k8s.api.core.v1.PortworxVolumeSource.dhall))
, projected = ([] : Optional (../types/io.k8s.api.core.v1.ProjectedVolumeSource.dhall))
, quobyte = ([] : Optional (../types/io.k8s.api.core.v1.QuobyteVolumeSource.dhall))
, rbd = ([] : Optional (../types/io.k8s.api.core.v1.RBDVolumeSource.dhall))
, scaleIO = ([] : Optional (../types/io.k8s.api.core.v1.ScaleIOVolumeSource.dhall))
, secret = ([] : Optional (../types/io.k8s.api.core.v1.SecretVolumeSource.dhall))
, storageos = ([] : Optional (../types/io.k8s.api.core.v1.StorageOSVolumeSource.dhall))
, vsphereVolume = ([] : Optional (../types/io.k8s.api.core.v1.VsphereVirtualDiskVolumeSource.dhall))
}
